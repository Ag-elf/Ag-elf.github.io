<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hitokoto</title>
    <url>/2021/04/27/hitokoto/</url>
    <content><![CDATA[<div class='htkt'><p align='left'><i class="fa fa-quote-left"></i></p>
<dd align='center' id="hitokoto">:D Getting Hitokoto </dd>
<dt align='right'> ------ From 「<t id="From">Johnny Boy</t>」 <t id="creator"></t></dt>
<script>
  fetch('https://v1.hitokoto.cn')
    .then(response => response.json())
    .then(data => {
      const hitokoto = document.getElementById('hitokoto')
      const from = document.getElementById('From')
      const creator = document.getElementById('creator')
      hitokoto.href = 'https://hitokoto.cn/?uuid=' + data.uuid
      hitokoto.innerText = data.hitokoto
      from.innerText = data.from
      if(data.from_who != null) {
          creator.innerText = "By "+ data.from_who
      }
    })
    .catch(console.error)
</script>
<p align='right'><i class="fa fa-quote-right"></i><p></div>

<p>刷新会给你不一样的“一言”，接口支持：<a href="https://hitokoto.cn/">Hitokoto</a>。</p>
]]></content>
      <categories>
        <category>碎碎念</category>
        <category>一言</category>
      </categories>
      <tags>
        <tag>一言</tag>
      </tags>
  </entry>
  <entry>
    <title>0x07 - Docker小鲸鱼的使用笔记 [1] 从无到有</title>
    <url>/2021/05/24/0x07-Docker_Usage/</url>
    <content><![CDATA[<p><img src="/images/docker.png" alt="Docker 小鲸鱼"></p>
<h1 id="Docker-Docker"><a href="#Docker-Docker" class="headerlink" title="Docker? Docker!"></a>Docker? Docker!</h1><p>Docker，码头工人，搬运工，承运者，可爱的小鲸鱼。</p>
<p>简单来说 <a href="https://www.docker.com/">Docker</a> 是一个开源的应用容器引擎。<br>开发者把应用，软件还有相应依赖通过 Docker 打包成一个轻量级、可移植的容器，<br>只要目标机器拥有 Docker 的运行环境，不用关心内部的依赖即可方便完成应用分发和发布工作，<br>非常适用于集群环境，既节约开销，也方便部署。</p>
<h1 id="它如何工作？"><a href="#它如何工作？" class="headerlink" title="它如何工作？"></a>它如何工作？</h1><p>Image<br>Container<br>Registry</p>
<h1 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h1><p>Reference:<br>当然，Docker 的项目网址还有<a href="https://docs.docker.com/">文档</a>其实非常清晰明了。<br>如果对英文比较苦手，一些成品文档，例如 <a href="https://www.runoob.com/docker/docker-tutorial.html">runnoob</a> 也是不错的去处。</p>
<p>这里只是拾人牙慧，总结了一些自己在 Docker 使用过程中的经验。</p>
<p>那让，我们开始吧——</p>
<hr>
<h2 id="0x00-安装"><a href="#0x00-安装" class="headerlink" title="0x00 安装"></a>0x00 安装</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>广大的 Linux 用户只需要运行以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun      <span class="comment"># 当然，Aliyun 是可选的</span></span></span><br></pre></td></tr></table></figure>

<p>等待着一切安装完成——<br>然后让我们来看看成果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker -v</span></span><br></pre></td></tr></table></figure>

<p>Ok，你已经准备好下一步了。</p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>Windows 下的 Docker 可以在 <a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows">这里</a> 找到。<br>像是一般软件一样点击下一步安装完成后，小鲸鱼会出现在你的通知栏。</p>
<p>这样，你就可以在 Windows 下使用 Docker 了。</p>
<p>PS. 小鲸鱼偏好 Linux，在 Windows 下运行会额外消耗资源。</p>
<h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><p>MacOS 我们可以使用 Homebrew 来安装 Docker。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install --cask --appdir=/Applications docker</span></span><br></pre></td></tr></table></figure>

<p>和 Windows 一样，安装完成后小鲸鱼会出现在你的状态栏。</p>
<p>Enjoy ~</p>
<h2 id="0x01-Hello-World"><a href="#0x01-Hello-World" class="headerlink" title="0x01 Hello World"></a>0x01 Hello World</h2>]]></content>
      <categories>
        <category>技术</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>0x06 - 聚类算法 - 我从哪里来，又到哪里去</title>
    <url>/2021/05/13/0x06-Clustering/</url>
    <content><![CDATA[<h1 id="聚类，Clustering"><a href="#聚类，Clustering" class="headerlink" title="聚类，Clustering"></a>聚类，Clustering</h1><p>今天遇到了一个需求，需要在二维平面上将相似（相近）的坐标归类到一起，好方便下一步的数据分析工作。</p>
<p>那么趁此机会，不如来说说不同聚类算法的，计算过程。</p>
<p><em>施工中</em></p>
<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>先来聊聊什么是聚类。</p>
<p>聚类是统计学上的概念，属于机器学习中的非监督学习。简单来说，应用这种算法的最根本目的就在于，让数据根据本身的特性进行分类，最终区分出同类与不同类的数据。</p>
<p>由于事先我们并不知道该如何分类处理这些数据，因此，我们并没有明确的分类准则。正因为这这样，我们需要数据本身来为我们提供划分标准，因而属于非监督学习。</p>
<h2 id="0x00-K-Means"><a href="#0x00-K-Means" class="headerlink" title="0x00 K-Means"></a>0x00 K-Means</h2><h2 id="0x01-Meanshift-Clustering"><a href="#0x01-Meanshift-Clustering" class="headerlink" title="0x01 Meanshift Clustering"></a>0x01 Meanshift Clustering</h2><h2 id="0x02-DBScan-Clustering"><a href="#0x02-DBScan-Clustering" class="headerlink" title="0x02 DBScan Clustering"></a>0x02 DBScan Clustering</h2><p>Density-based spatial clustering of applications with noise (DBSCAN)</p>
<h2 id="0x03-Agglomerative-Hierarchical-Clustering"><a href="#0x03-Agglomerative-Hierarchical-Clustering" class="headerlink" title="0x03 Agglomerative Hierarchical Clustering"></a>0x03 Agglomerative Hierarchical Clustering</h2>]]></content>
      <categories>
        <category>技术</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Clustering</tag>
      </tags>
  </entry>
  <entry>
    <title>0x05 - FFXIV - 02 - 捕鱼人</title>
    <url>/2021/05/10/0x05-FFXIV-2/</url>
    <content><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>捕鱼人的清晨总是来得很早。<br>擦拭着鱼竿，筹备着鱼饵，大清早奔赴钓场等待着合适的时机。</p>
<p>「嗯，今天也是个好天气~」</p>
<p>狂风呼啸的大海，电闪雷鸣，翻涌的波涛仿佛要把一切吞噬殆尽，红玉炮台的一隅岌岌可危。<br>此情此景，捕鱼人露出了欣慰的笑容。</p>
<p>……今天，红龙会出海。</p>
<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>众所周知，魔大陆有三幻神，<br>而我们的捕鱼人，也有四幻神，当然，说的是鱼。</p>
<p>东之红龙，西之沙皇；天之蝴蝶螺，湖之胸脊鲨。<br>个个都身怀绝技，随随便便都是能脱的主。</p>
<p>当七彩天主的门票吃掉了第 10086 条嗡嗡石蝇后，几近破产的捕鱼人，最终决定放弃延夏旅游公司的往返三日游。</p>
<p>她把鱼竿晾了起来，拿起了许久未动的黑魔杖……</p>
<p>据说后来，七彩沟每次荡漾起核爆的声响，都会有快乐的捕鱼人，还有端着的，烤熟了的七彩天主。</p>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>红龙鲜少有浮出水面的一天，有时候甚至要等好几十天才能等到一个不错的窗口。</p>
<p>但是红龙是个死傲娇，如果让它起它就起，红龙就会很没面子。<br>一般来说，需要邻家阿姨苦尔鳗大婶，苦苦给红龙介绍，<br>红龙才会羞涩地从水里起来，轻轻拽一拽捕鱼人的钩。</p>
<p>因此，钓红龙是门技术活，耐心与恒心并存。</p>
<p>首先，在红龙开始活动前先用若干的鱼饵贿赂苦尔鳗大婶；<br>睁一只眼闭一只眼的苦尔鳗大婶，这时候才有可能会去敲一敲红龙的门；而绝大多数时候，苦尔鳗大婶会一个人回来。<br>这个时候就需要安抚一下苦尔鳗大婶，让它静下心来再去一次。</p>
<p>成为工具人的苦尔鳗大婶自然不会乐意，去过 2 ~ 3 次以后，苦尔鳗大婶也会愤而脱钩。<br>在此之后，只能从头开始，用更多的鱼饵，更多的贿赂……</p>
<p>当然，还有更多的苦尔鳗，和更多的脱钩……</p>
<p>「在苦尔鳗套娃的循环中体验，更快，更高，更强的痛楚。」——来自加雷马帝国的某位不愿意透露姓名的资深捕鱼人。</p>
<p>「捕鱼人，可不适合在钓红龙时，露出脱钩的表情。」——来自伊修加德豪门的某位捕鱼人。</p>
<h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>建设伊修加德新农村，我辈义不容辞。</p>
<p>捕鱼人不知道为什么，就被拽上了去往云冠群岛的特快空艇。</p>
<p>云冠群岛的独特气候每 3 个多小时就会变更一次。<br>这让，习惯了看早上天气，来预测下午天气的捕鱼人难以进行捕鱼作业。</p>
<p>“云海中可能会没有蜻蜓，没有狮鹫。”<br>“但是莫莫拉莫拉的模样却依然会如期而至。”</p>
<p>——还有在一起的，奇奇怪怪，形形色色的不死鱼。</p>
]]></content>
      <categories>
        <category>碎碎念</category>
        <category>FFXIV</category>
      </categories>
      <tags>
        <tag>FFXIV的故事</tag>
      </tags>
  </entry>
  <entry>
    <title>0x04 - Cassandra &amp; Spark：[1] 从 Cassandra 开始的大数据处理之路</title>
    <url>/2021/05/06/0x04-Cassandra-1/</url>
    <content><![CDATA[<h1 id="从-Cassandra-开始的大数据处理之路"><a href="#从-Cassandra-开始的大数据处理之路" class="headerlink" title="从 Cassandra 开始的大数据处理之路"></a>从 Cassandra 开始的大数据处理之路</h1><p>每每遇到数据量过大的场景后，如何对海量数据进行处理就成了一个头疼的问题。使用关系型数据库时往往会遇到数据量大，表格离散，分区分表繁琐，难以简单处理等问题。在对数据读写量有海量需求的时候，使用 Cassandra 这样的 NoSQL 分布式数据库或许是一个合理的解决方案。</p>
<h2 id="Cassandra-是什么"><a href="#Cassandra-是什么" class="headerlink" title="Cassandra 是什么"></a>Cassandra 是什么</h2><p>所以 Cassandra 是什么呢？</p>
<div class='quote_div_en'><p align='left'><i class="fa fa-quote-left"></i></p>
<dd>Cassandra 是一套开源分布式 NoSQL 数据库系统，
<dd>它最初由 Facebook 开发，用于储存收件箱等简单格式数据。
<dd>集 GoogleBigTable 的数据模型与 Amazon Dynamo 的完全分布式的架构于一身，
<dd>Facebook 于 2008 将 Cassandra 开源。
<dd>此后，由于 Cassandra 良好的可扩展性，
<dd>被 Digg、Twitter 等知名 Web 2.0 网站所采纳，
<dd>成为了一种流行的分布式结构化数据存储方案。
<dt align='right'> ------ From <a href="https://baike.baidu.com/item/cassandra/20140772">百度百科</a></dt>
<p align='right'><i class="fa fa-quote-right"></i><p></div>

<p>NoSQL （Not Only SQL） 即为非关系型的数据库。</p>
<p>为了应对网络应用场景下的高并发和大规模数据应用，Cassandra 应运而生，是为了解决大数据应用难题而诞生的数据库解决方案之一。</p>
<p>但是抛开华丽的外表， Cassandra 也只是一种存储数据的方法而已，如何去使用，如何去利用这些数据才是我们应该关心的事。</p>
<h2 id="Cassandra-的不同之处"><a href="#Cassandra-的不同之处" class="headerlink" title="Cassandra 的不同之处"></a>Cassandra 的不同之处</h2><ul>
<li><p>Cassandra 是分布式系统，在存储空间不够时，只需要增加节点就可以扩充存储空间。 而在使用关系型数据库，例如 mysql 时，它的单表数据量是有瓶颈的，当数据量到达一定级别，就需要考虑分库分表或者分区等。而这一点在 Cassandra 这里，仅需要增加节点就可以解决了，非常方便。</p>
</li>
<li><p>Cassandra 可以动态增删表的字段，这在大型项目的部署上，是很大的效率提升。</p>
</li>
<li><p>Cassandra 作为分布式处理的数据库，IO 性能也是非常关键的考量要点之一，而比较高效的写入性能意味着 Cassandra 可以应对大量写入、统计和分析的应用场景。但相对应的，读取性能则需要进行一定程度的优化。</p>
</li>
<li><p>Cassandra 作为 NoSQL 数据库，其建表操作还有设计逻辑与传统关系型数据库有比较大的差异。由于没有 Join 操作，在建表时需要考虑各种各样的因素。不过在熟悉 NoSQL 的处理逻辑之后，这种处理方式在大数据环境下更加便于处理。</p>
</li>
</ul>
<h2 id="Open-The-Box-打开盒子"><a href="#Open-The-Box-打开盒子" class="headerlink" title="Open The Box 打开盒子"></a>Open The Box 打开盒子</h2><p>于是这里，简单了解过 Cassandra 以后，让我们部署一下 Cassandra 服务。</p>
<p>由于 Cassandra 是集群数据库，所以大部分情况都需要在云端进行操作。 Aliyun 的 Cassandra 服务就可以满足绝大部分的需求。</p>
<p>那么如果，我们需要在本地跑一个简单的测试用数据库，该怎么做呢？</p>
<p>首先是我的环境：</p>
<table>
<thead>
<tr>
<th>Object</th>
<th>Version</th>
</tr>
</thead>
<tbody><tr>
<td>OS.</td>
<td>Ubuntu 20.04</td>
</tr>
<tr>
<td>JVM.</td>
<td>Open-JDK-1.8.0_292</td>
</tr>
<tr>
<td>Cassandra</td>
<td>apache-cassandra-3.11.10-bin.tar.gz</td>
</tr>
</tbody></table>
<p>在安装 Cassandra 前需要确认 Java 环境。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br></pre></td></tr></table></figure>

<p>假如没有 JVM， 直接运行 Cassandra 会报以下的错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cassandra 3.0 and later require Java 8u40 or later.</span><br></pre></td></tr></table></figure>

<p>安装 JDK 的方法（JRE 也行，不过因为本人会做 JAVA 开发，因此会需要用上 JDK）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install openjdk-8-jdk        <span class="comment"># 别忘了更改环境变量</span></span></span><br></pre></td></tr></table></figure>

<p>在配置好环境以后，我们就可以开始安装 Cassandra 了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://mirrors.bfsu.edu.cn/apache/cassandra/3.11.10/apache-cassandra-3.11.10-bin.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="comment"># wget https://mirrors.tuna.tsinghua.edu.cn/apache/cassandra/3.11.10/apache-cassandra-3.11.10-bin.tar.gz # 你可能需要清华源</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf apache-cassandra-3.11.10-bin.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>解压后的目录为 <code>apache-cassandra-3.11.10-bin</code>， 现在让我们来试一试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> apache-cassandra-3.11.10-bin/bin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cassandra                             <span class="comment"># 一切从这里开始</span></span></span><br></pre></td></tr></table></figure>

<p>在一长串的处理，一箩筐的日志以后，假如没有报 <code>error</code>，那么 Cassandra 的本地服务就已经启动了。<br>现在，让我们通过 <code>cqlsh</code> 来连接数据库。<code>cqlsh</code> 也在 <code>bin</code> 文件夹内</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./cqlsh</span></span><br><span class="line">Connected to Test Cluster at 127.0.0.1:9042.</span><br><span class="line">[cqlsh 5.0.1 | Cassandra 3.11.10 | CQL spec 3.4.4 | Native protocol v4]</span><br><span class="line">Use HELP for help.</span><br><span class="line">cqlsh &gt;</span><br></pre></td></tr></table></figure>

<p>简单尝试一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">cqlsh <span class="operator">&gt;</span> <span class="keyword">DESCRIBE</span> KEYSPACES;</span><br><span class="line"></span><br><span class="line">system_traces  system_schema  system_auth  <span class="keyword">system</span>  system_distributed</span><br></pre></td></tr></table></figure>

<p>那么到这里，Cassandra 的本地环境算是搭建完成了，需要远程连接云端 Cassandra 数据库的话，请这样写：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./cqlsh -u <span class="string">&#x27;username&#x27;</span> -p <span class="string">&#x27;password&#x27;</span> your.cassandra.server.com 8888</span></span><br></pre></td></tr></table></figure>

<p>切记，Cassandra 默认只允许本地连接，如果需要远程连接，请到服务器端更改 <code>cassandra/conf</code> 下 <code>cassandra.yaml</code> 的配置。<br>如果遇到 <code>Last error: Connection refused</code>，可以参看 <a href="https://stackoverflow.com/questions/29121904/cassandra-cqlsh-connection-refused">这个帖子</a>。</p>
<h2 id="SQL-到-CQL"><a href="#SQL-到-CQL" class="headerlink" title="SQL 到 CQL"></a>SQL 到 CQL</h2><p>我会推荐直接查看 <a href="https://www.w3cschool.cn/cassandra/cassandra_introduction.html">w3cSchool</a>。如果有耐心读英文的话，<a href="http://cassandra.apache.org/doc/latest/cql/">官方文档</a> 也是个不错的参考处。</p>
<p><em>施工中，或许会懒，将来兴许会有 CQL 的基本用法</em><br><em>以上，是鸽子宣言</em></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
        <category>Cassandra &amp; Spark</category>
      </categories>
      <tags>
        <tag>Cassandra</tag>
      </tags>
  </entry>
  <entry>
    <title>0x03 - 图像识别 学习地图</title>
    <url>/2021/04/30/0x03-Machine-Learning-1/</url>
    <content><![CDATA[<h2 id="物件识别"><a href="#物件识别" class="headerlink" title="物件识别"></a>物件识别</h2><p>搭建在 PaddlePaddle 上的物件识别模块，Github: <a href="https://github.com/PaddlePaddle/PaddleDetection">PaddleDetection</a>。</p>
<p>下面是概述图。</p>
<table>
  <tbody class='my_table'>
    <thead>
        <tr align="center" valign="bottom">
        <td>
            <b>Architectures</b>
        </td>
        <td>
            <b>Backbones</b>
        </td>
        <td>
            <b>Components</b>
        </td>
        <td>
            <b>Data Augmentation</b>
        </td>
        </tr>
    </thead>
    <tr valign="top">
      <td>
        <ul><li><b>Two-Stage Detection</b></li>
          <ul>
            <li>Faster RCNN</li>
            <li>FPN</li>
            <li>Cascade-RCNN</li>
            <li>Libra RCNN</li>
            <li>Hybrid Task RCNN</li>
            <li>PSS-Det</li>
          </ul>
        </ul>
        <ul><li><b>One-Stage Detection</b></li>
          <ul>
            <li>RetinaNet</li>
            <li>YOLOv3</li>
            <li>YOLOv4</li>  
            <li>PP-YOLO</li>
            <li>SSD</li>
          </ul>
        </ul>
        <ul><li><b>Anchor Free</b></li>
          <ul>
            <li>CornerNet-Squeeze</li>
            <li>FCOS</li>  
            <li>TTFNet</li>
          </ul>
        </ul>
        <ul>
          <li><b>Instance Segmentation</b></li>
            <ul>
             <li>Mask RCNN</li>
             <li>SOLOv2</li>
            </ul>
        </ul>
        <ul>
          <li><b>Face-Detction</b></li>
            <ul>
             <li>FaceBoxes</li>
             <li>BlazeFace</li>
             <li>BlazeFace-NAS</li>
            </ul>
        </ul>
      </td>
      <td>
        <ul>
          <li>ResNet(&vd)</li>
          <li>ResNeXt(&vd)</li>
          <li>SENet</li>
          <li>Res2Net</li>
          <li>HRNet</li>
          <li>Hourglass</li>
          <li>CBNet</li>
          <li>GCNet</li>
          <li>DarkNet</li>
          <li>CSPDarkNet</li>
          <li>VGG</li>
          <li>MobileNetv1/v3</li>  
          <li>GhostNet</li>
          <li>Efficientnet</li>  
        </ul>
      </td>
      <td>
        <ul><li><b>Common</b></li>
          <ul>
            <li>Sync-BN</li>
            <li>Group Norm</li>
            <li>DCNv2</li>
            <li>Non-local</li>
          </ul>  
        </ul>
        <ul><li><b>FPN</b></li>
          <ul>
            <li>BiFPN</li>
            <li>BFP</li>  
            <li>HRFPN</li>
            <li>ACFPN</li>
          </ul>  
        </ul>  
        <ul><li><b>Loss</b></li>
          <ul>
            <li>Smooth-L1</li>
            <li>GIoU/DIoU/CIoU</li>  
            <li>IoUAware</li>
          </ul>  
        </ul>  
        <ul><li><b>Post-processing</b></li>
          <ul>
            <li>SoftNMS</li>
            <li>MatrixNMS</li>  
          </ul>  
        </ul>
        <ul><li><b>Speed</b></li>
          <ul>
            <li>FP16 training</li>
            <li>Multi-machine training </li>  
          </ul>  
        </ul>  
      </td>
      <td>
        <ul>
          <li>Resize</li>  
          <li>Flipping</li>  
          <li>Expand</li>
          <li>Crop</li>
          <li>Color Distort</li>  
          <li>Random Erasing</li>  
          <li>Mixup </li>
          <li>Cutmix </li>
          <li>Grid Mask</li>
          <li>Auto Augment</li>  
        </ul>  
      </td>  
    </tr>
</td>
    </tr>
  </tbody>
</table>

<p>希望学起来不会太累、</p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>0x02 - 杂碎</title>
    <url>/2021/04/29/0x02-Other-things-1/</url>
    <content><![CDATA[<h2 id="0x00-大海"><a href="#0x00-大海" class="headerlink" title="0x00 大海"></a>0x00 大海</h2><p>大海可以是浪漫，</p>
<p>无垠，无限，渺无边际。</p>
<div class='quote_div_en'><p align='left'><i class="fa fa-quote-left"></i></p>
<dd>Johnny Boy, Johnny Boy, we are born for stormy weather.</dd>
<dd>Johnny Boy, Johnny Boy, I wish you last farewell.</dd>
<dd>Somewhere out far away, we are sailing on together.</dd>
<dd>Oh Johnny, my, we are leaving tonight.</dd>
<dd>Johnny say Good Bye.</dd>
<dt align='right'> ------ From <i>"Johnny Boy"</i> By Santiano</dt>
<p align='right'><i class="fa fa-quote-right"></i><p></div>

<p>说不定去当海盗是个不错的归处。</p>
<h2 id="0x01-朗姆酒"><a href="#0x01-朗姆酒" class="headerlink" title="0x01 朗姆酒"></a>0x01 朗姆酒</h2><p>如果海盗不打杀，只是在船上，</p>
<p>早期的水手们，因为清水容易变质会致病，</p>
<p>为了保存珍贵的水资源，都喜欢喝朗姆酒。</p>
<p>说不定一船人，天天都醉醺醺的，</p>
<p>横摆着，摇晃着，朗姆酒与啤酒，</p>
<p>这样自由的日子比起打工和上班族，好像更不错。</p>
<p>杨帆，起航——</p>
<p>需要救命的朗姆，朗姆，朗姆，否则我们将干渴而死！</p>
<div class='quote_div_en'><p align='left'><i class="fa fa-quote-left"></i></p>
<dd>Wir brauchen Rum, Rum, Rum, Sonst verdursten wir.</dd>
<dt align='right'> ------ From <i>"Es gibt nur Wasser"</i> By Santiano</dt>
<p align='right'><i class="fa fa-quote-right"></i><p></div>


<h2 id="0x02-海里有什么"><a href="#0x02-海里有什么" class="headerlink" title="0x02 海里有什么"></a>0x02 海里有什么</h2><p>有宝藏、有梦想、还有阴魂不散的莫莫拉·莫拉。</p>
<p>真正的文兰或许不会存在，死后也不会回归瓦尔哈拉，</p>
<p>但对于海盗来说，梦想与彼方对于自己来说又有什么关系呢？</p>
<p>《冰海战记》中对于维京海盗的描写出乎我的意料。</p>
<p>也许烧杀抢掠才该是海盗生活的主旋律，<br>但是阿谢拉特有自己的梦想，远方的文兰，自己的抱负。<br>出身卑贱，背负着罗马人的血脉，</p>
<p>不管是大帝还是托尔芬，<br>大概都会铭记一生吧。</p>
<p>海水是咸，裹挟着苦辣，把所有的一切都蚀刻殆尽。</p>
<h2 id="0x03-彼岸"><a href="#0x03-彼岸" class="headerlink" title="0x03 彼岸"></a>0x03 彼岸</h2><p>自己珍惜的东西永远只有自己是最珍视的，<br>但大部分情况这就足够了。</p>
<p>毕竟任何人都没有义务，去喜欢别人喜欢的东西。</p>
<p>竟然真的可以在海边钓一整天的鱼，<br>既没有烦躁，也没有愉悦。<br>只是对着那一片汪洋，<br>甩杆，收杆，甩杆，收杆。</p>
<p>越是缝缝补补，<br>错误也就不断累积。<br>或早或晚，来去终有一天，<br>收获罪有应得。</p>
<p>Bug 越多， 错误越多。</p>
<p>「没关系，我自己一个人能行！」<br>听着，像是借口。</p>
<hr>
]]></content>
      <categories>
        <category>碎碎念</category>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>杂七杂八</tag>
      </tags>
  </entry>
  <entry>
    <title>0x01 - FFXIV - 01 - 阿猫和阿肥</title>
    <url>/2021/04/29/0x01-FFXIV-1/</url>
    <content><![CDATA[<h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>「潮虫，鳞虾，还有拟饵……」</p>
<p>阿猫今天想做柠檬烤鱼，淡淡的酸味让他着迷，但越来越少的鱼饵难倒了他。</p>
<p>这是阿猫来海都的第三天。咸咸的海风，拽着绵绵小雨，在入冬的海都显得格外清冷。<br>神典石上说，钓鱼得用 上好的鱼饵，但鱼只有在天晴的时候，才会在海都上层浮上水面。  </p>
<p>「唔，又脱钩了。」</p>
<p>阿猫摇了摇头，收起了鱼竿。他带了一整箱各式各样的鱼饵，但鱼王根本不搭理他，嘲笑着猫的不自量力，翻了几个泡泡游走了。</p>
<p>……</p>
<hr>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>「嘿~你在做什么？」</p>
<p>被拍了拍肩，正在发呆的尖耳朵拉拉菲尔吓了一跳，站在她后面的高个子猫魅一丝不漏把阳光全都罩住了。她站在猫魅背光的影子里，像是被盯上的猎物。</p>
<p>「呜呜呜，不要吃我呜呜。。。」<br>拉拉菲尔就像兔子一般，委屈得哭了出来。</p>
<p>「哎哎？」猫魅有点摸不着头脑，他只是钓鱼的时候被一股香味吸引了过来。</p>
<p>周围的视线在菲尔的哭声中越发的刺人，猫魅有些慌张。<br>「不吃啦不吃，猫魅族吃拉拉菲尔那么油腻的肉会拉肚子的。」他这么说。</p>
<p>「呜呜呜，你说我油。。。」<br>拉拉菲尔哭得更大声了。</p>
<p>哎呀……猫魅挠了挠头，这可怎么办呢，鱼都被吓跑了。<br>但那个香味究竟是什么呢。</p>
<p>好像包里有应对这种情况的道具？<br>他翻看了一下背包……</p>
<p>「菲尔，菲尔，你看这是什么。」<br>还在小声的啜泣的拉拉菲尔睁开了哭红的眼睛，猫魅递过来了一个小纸袋子。</p>
<p>「这是什么，是调味料嘛……」<br>哎……猫魅有点晕。「打开看看。」</p>
<p>那是用竹纸包好的一小袋金平糖。拉拉菲尔取了一颗放进嘴里，砸吧砸吧，砂糖和蜂蜜的甜味混杂萦绕在舌尖。<br>真甜啊。。。她不禁低下了头</p>
<p>「呼~这样就好了」，猫魅松了一口气，悄悄把藏在背包里的风信子头花系在菲尔的头上。果然小个子戴上头花才更可爱嘛。</p>
<p>啊~<br>凑近了的猫魅明白过来。<br>从拉拉菲尔的头发，那是薰衣草的味道。<br>淡淡，悠扬，紫色的气味。</p>
<hr>
]]></content>
      <categories>
        <category>碎碎念</category>
        <category>FFXIV</category>
      </categories>
      <tags>
        <tag>FFXIV的故事</tag>
      </tags>
  </entry>
  <entry>
    <title>0x00 - Hexo 建站， Start From Here</title>
    <url>/2021/04/28/0x00-Hexo-1/</url>
    <content><![CDATA[<div class='quote_div'><p align='left'><i class="fa fa-quote-left"></i></p>
人生苦短，不造轮子
<p align='right'><i class="fa fa-quote-right"></i><p></div>

<p>这是所有日志的起点，第一篇不知所谓但是就是想贴在这里的日志。</p>
<p>作为第一篇的话，这里准备写一写如何利用 Hexo 搭建这个网站。</p>
<p>不过工程正在建设中，如果发现没有写完的话就稍后再来吧~</p>
<h3 id="0x00-准备工作"><a href="#0x00-准备工作" class="headerlink" title="0x00 准备工作"></a>0x00 准备工作</h3><p>一切的开始要从安装 <a href="https://hexo.io/">Hexo</a> 开始。<br>如果有需要，也可以直接看官方的 <a href="https://hexo.io/docs/">文档</a>。<br>npm 是 Nodejs 的包管理工具，所以在此之前先安装 Nodejs 也是相当必要的。</p>
<hr>
<p>请在 <a href="http://nodejs.cn/download/">这里</a> 找到 Nodejs 的下载地址，并在运行下面的代码之前安装完成。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-cli -g       <span class="comment"># 安装 Hexo</span></span></span><br></pre></td></tr></table></figure>

<p>接着就是等待 npm 自己完成自己的工作了。</p>
<p>在安装完成后，我们就可以着手第一个网站的搭建。<br>运行下面的脚本来初始化我们的网站。<br><strong>注意！以后我们的网站的根目录就是下面这个 new_site 文件夹了</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init new_site            <span class="comment"># 初始化 Hexo 仓库</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> new_site</span></span><br></pre></td></tr></table></figure>

<h3 id="0x01-开始"><a href="#0x01-开始" class="headerlink" title="0x01 开始"></a>0x01 开始</h3><p>在初始化以后的文件夹内部，惊喜地发现在根目录下多了若干的文件夹。</p>
<p>在 <code>source/_posts</code> 下的 Markdown 文件就是我们的内容文件了。</p>
<p>官方准备了一份 <code>hello-world.md</code> 来协助完成写作的任务。</p>
<p>其实到此为止，已经完成了大部分的工作，接下来只需要运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server                   <span class="comment"># 本地服务器开启</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s                        <span class="comment"># 也可以这样简写</span></span></span><br></pre></td></tr></table></figure>
<p>你就可以在 <a href="http://localhost:4000/">http://localhost:4000</a> 看到网站最初的成果了</p>
<hr>
<p>如果希望将文件保存为静态页面，请运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo generate                 <span class="comment"># 保存为静态页面</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g                        <span class="comment"># 简写</span></span></span><br></pre></td></tr></table></figure>

<p>在根目录下的 <code>public</code> 文件夹内，就是生成的所有网页文件了。</p>
<h3 id="0x02-部署"><a href="#0x02-部署" class="headerlink" title="0x02 部署"></a>0x02 部署</h3><p>那么现在一切准备就绪，如果我们希望发布到静态网站服务，例如 github pages 或者 gitee pages 上，那么我们可以使用 hexo 的 deployment 功能。</p>
<p>假如我们的目标是 github pages，那么我们首先需要新建一个 github pages 的仓库，请在 <a href="https://pages.github.com/">这里</a> 找到搭建 github pages 的教程。</p>
<ul>
<li>一句话概括：新建 Repository, 名字为 <code>username.github.io</code> 。</li>
</ul>
<p>在 <code>_config.yml</code> 内找到这部分，并且根据自己的情况更改配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span>                                                   <span class="comment"># Git 方式</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/username/username.github.io</span>    <span class="comment"># 仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span>                                                <span class="comment"># 主要分支</span></span><br></pre></td></tr></table></figure>


<p>接下来的事情，hexo 会帮你做好</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy                   <span class="comment"># 部署至指定位置</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d                        <span class="comment"># 简写</span></span></span><br></pre></td></tr></table></figure>

<p>一切就绪，Enjoy~</p>
<h3 id="0x03-新建"><a href="#0x03-新建" class="headerlink" title="0x03 新建"></a>0x03 新建</h3><p>想在 Hexo 新建 Post 很简单:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new post new_post        <span class="comment"># 新建名字叫 new_post 的 post</span></span></span><br></pre></td></tr></table></figure>

<p>执行完成后你就可以在 <code>source/_posts</code> 里找到新建的文档了。</p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>你好世界，Hello World，ハローワルド</title>
    <url>/2021/04/27/hello-world/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>欢迎来到这里，你找到了一个不起眼的攻城师。</p>
<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>网易云音乐后期患者，时不时会犯病，多多包容呐~</p>
<p>正经工作是一名算法工程师，也许将来的某一天会有自己开源的社区吧hhhh</p>
<p>梦想是有有一个厉害又别致的个人助力AI</p>
<p>工作之余是艾欧泽亚合法光呆，FFXIV洗澡水玩家，可以在下面找到我。</p>
<p>想要做的事有一大箩筐，但是时间又这么少。</p>
<div class='quote_div'><p align='left'><i class="fa fa-quote-left"></i></p>
「假如不会正则搜索的话，不如就遍历吧~」
<p align='right'><i class="fa fa-quote-right"></i><p></div>

<h3 id="关于程序员"><a href="#关于程序员" class="headerlink" title="关于程序员"></a>关于程序员</h3><p>主攻机器学习的研究生</p>
<div class='quote_div'><p align='left'><i class="fa fa-quote-left"></i></p>
「笑死，根本不是机器学习，是人类学习 」
<p align='right'><i class="fa fa-quote-right"></i><p></div>


<h3 id="关于FFXIV"><a href="#关于FFXIV" class="headerlink" title="关于FFXIV"></a>关于FFXIV</h3><p>Since 2018。下图为曾经的猫。</p>
<p><img src="/images/shigure_hotaru.jpg" alt="shigure_hotaru" title="傻猫"></p>
<hr>
<p>如今的拉拉肥。</p>
<p><img src="/images/lalafell.png" alt="shigure_hotaru" title="拉拉肥"></p>
<hr>
<p>不如在这里贴一贴曾经的经历吧，来自曾经月雫话剧团的各位们。<br>详情可以去看 <a href="https://space.bilibili.com/4064009">月雫剧团录像机EijNim号</a></p>
<p><img src="/images/hello_world_2.jpg" alt="shigure_hotaru" title="亲友们"></p>
<hr>
<p>也曾经攻略过绝本。感谢过去的队友们~<br>右三绿脖子的猫就是我啦~</p>
<p><img src="/images/after.jpg" alt="alexander"></p>
<p>详情可以去看 <a href="https://www.bilibili.com/video/BV14E411M7eS">这个</a></p>
<h2 id="如今"><a href="#如今" class="headerlink" title="如今"></a>如今</h2><p>目前是一名只要日子过得去就不准备随便改变的程序员</p>
<p>该如何面对未来呢~</p>
<h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>理想型是喜欢自己的人。</p>
<p>不过未来谁又能明白呢，或许想要成为一名努力而又有所成就的人吧</p>
<hr>
]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
  </entry>
  <entry>
    <title>站点日志</title>
    <url>/2021/04/27/Diary/</url>
    <content><![CDATA[<h3 id="2021-05-17"><a href="#2021-05-17" class="headerlink" title="2021-05-17"></a>2021-05-17</h3><p><strong>1. 加入友情链接</strong></p>
<h3 id="2021-05-06"><a href="#2021-05-06" class="headerlink" title="2021-05-06"></a>2021-05-06</h3><p><strong>1. 加入字数统计和时间统计</strong></p>
<h3 id="2021-04-28"><a href="#2021-04-28" class="headerlink" title="2021-04-28"></a>2021-04-28</h3><p><strong>1. 更换主题为 Next，调试 Next 各项配置</strong><br><strong>2. 置顶 Hello World 日志</strong><br><strong>3. 更换背景图片，更新日志信息，发布第一份日志</strong></p>
<h3 id="2021-04-27"><a href="#2021-04-27" class="headerlink" title="2021-04-27"></a>2021-04-27</h3><p><strong>1. Hexo 脚本运行，初始化仓库</strong><br><strong>2. 编辑第一份日志，Hello World 提交</strong></p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
